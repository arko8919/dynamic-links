{"version":3,"sources":["webpack://url-shortener/./src/js/show-error.js","webpack://url-shortener/./src/js/check-pattern.js","webpack://url-shortener/./src/js/html-request-data.js","webpack://url-shortener/./src/js/fetch-short-link.js","webpack://url-shortener/./src/js/show-api-error.js","webpack://url-shortener/./src/index.js","webpack://url-shortener/./src/js/validate-url.js","webpack://url-shortener/./src/js/generate-short-link.js","webpack://url-shortener/./src/js/copy-to-clipboard.js"],"names":["showError","inputRef","divErrorRef","string","validity","valueMissing","textContent","RegExp","test","typeMismatch","className","htmlRequestData","url","param","dynamicLinkInfo","domainUriPrefix","link","suffix","option","myInit","method","headers","Headers","body","updateData","input","this","JSON","stringify","fetchShortLink","outputRef","value","fetch","then","response","ok","Error","status","json","objectResponse","shortLink","catch","error","console","log","showApiError","buttonRef","document","querySelectorAll","querySelector","addEventListener","event","valid","validateURL","preventDefault","generateShortLink","navigator","clipboard","writeText","innerText","copyToClipboard"],"mappings":"mBAEO,SAASA,EAAUC,EAAUC,GCD7B,IAAsBC,EDErBF,EAASG,SAASC,aAElBH,EAAYI,YAAc,oCCHhB,IAAIC,OAAO,wKAKC,KACTC,KAAKL,GDAXF,EAASG,SAASK,eAEzBP,EAAYI,YAAc,gDAH1BJ,EAAYI,YAAc,+CAM9BJ,EAAYQ,UAAY,eEbrB,MAAMC,EAAkB,CAC3BC,IAAK,wGAELC,MACA,CACIC,gBAAiB,CACbC,gBAAiB,yBACjBC,KAAM,IAEVC,OAAQ,CACJC,OAAQ,UAIhBC,OACA,CACIC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CACjB,eAAgB,qBAEpBC,KAAM,IAGVC,WAAY,SAAUC,GAElBC,KAAKb,MAAL,qBAAwCY,EAExCC,KAAKP,OAAOI,KAAOI,KAAKC,UAAUF,KAAKb,SCvBxC,SAASgB,EAAe5B,EAAUC,EAAa4B,GAGlDnB,aAA2BV,EAAS8B,OAEpCC,MAAMrB,EAAgBC,IAAKD,EAAgBQ,QACtCc,MAAKC,IAGF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAO,uBAAsBF,EAASG,UAEpD,OAAOH,EAASI,UAEnBL,MAAKM,IAEFT,EAAUC,MAAQQ,EAAeC,aAEpCC,OAAMC,IACHZ,EAAUC,MAAQ,GCvBvB,SAAsB7B,EAAawC,GACtCxC,EAAYI,YAAc,mDAC1BJ,EAAYQ,UAAY,eACxBiC,QAAQC,IAAIF,GDqBJG,CAAa3C,EAAawC,MEjBtC,MAAMI,EAAYC,SAASC,iBAAiB,yBACtC/C,EAAW8C,SAASE,cAAc,UAClC/C,EAAc6C,SAASE,cAAc,sBACrCnB,EAAYiB,SAASE,cAAc,WAMzChD,EAASiD,iBAAiB,SAASC,KCd5B,SAAqBlD,EAAUC,GAE9BD,EAASG,SAASgD,OAClBlD,EAAYI,YAAc,gBAC1BJ,EAAYQ,UAAY,SAGxBV,EAAUC,EAAUC,GDQxBmD,CAAYpD,EAAUC,MAI1B4C,EAAU,GAAGI,iBAAiB,SAASC,KEnBhC,SAA2BA,EAAOlD,EAAUC,EAAa4B,GACvD7B,EAASG,SAASgD,MAInBvB,EAAe5B,EAAUC,EAAa4B,GAFtCqB,EAAMG,iBFiBVC,CAAkBJ,EAAOlD,EAAUC,EAAa4B,MAIpDgB,EAAU,GAAGI,iBAAiB,SAASC,KG1BhC,SAAyBrB,GACjB0B,UAAUC,UAClBC,UAAU5B,EAAU6B,WHyBvBC,CAAgB9B,O","file":"main.e31652652830335a9f0d.bundle.js","sourcesContent":["import { checkPattern } from './check-pattern';\r\n\r\nexport function showError(inputRef, divErrorRef) {\r\n    if (inputRef.validity.valueMissing) {\r\n        // If the field is empty, display the following error message\r\n        divErrorRef.textContent = 'You need to enter an url address.';\r\n    } else if (!checkPattern()) {\r\n        divErrorRef.textContent = 'Entered value needs to be an e-mail address.';\r\n    } else if (inputRef.validity.typeMismatch) {\r\n        // If the field doesn't contain an email address, display the following error message\r\n        divErrorRef.textContent = 'Entered value needs to be an e-mail address.';\r\n    }\r\n\r\n    divErrorRef.className = 'error active';\r\n}\r\n\r\n","// Validate URL ( I need to adjust regular expresion to match exactly link )\r\nexport function checkPattern(string) {\r\n    let pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\r\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\r\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\r\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\r\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\r\n        '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\r\n    return !!pattern.test(string);\r\n}","export const htmlRequestData = {\r\n    url: 'https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key=AIzaSyCezBfMpaJL-cj_IG0kyF8wK1LcbiCprcI',\r\n\r\n    param:\r\n    {\r\n        dynamicLinkInfo: {\r\n            domainUriPrefix: 'https://arko.page.link',\r\n            link: '',\r\n        },\r\n        suffix: {\r\n            option: 'SHORT'\r\n        }\r\n    },\r\n\r\n    myInit:\r\n    {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'Content-Type': 'application/json'\r\n        }),\r\n        body: {}\r\n    },\r\n\r\n    updateData: function (input) {\r\n        // Use URL from input to update param object\r\n        this.param['dynamicLinkInfo']['link'] = input;\r\n        // Update body which will be send with other fetch options\r\n        this.myInit.body = JSON.stringify(this.param);\r\n    }\r\n}\r\n","import { htmlRequestData } from './html-request-data';\r\nimport { showApiError } from './show-api-error';\r\n\r\n// Update link data and send request to server\r\nexport function fetchShortLink(inputRef, divErrorRef, outputRef) {\r\n    // Update data with new URL input from user\r\n    // Update fetch options\r\n    htmlRequestData.updateData(inputRef.value);\r\n\r\n    fetch(htmlRequestData.url, htmlRequestData.myInit)\r\n        .then(response => {\r\n            //  A fetch() promise does not reject on HTTP errors. \r\n            // Check the response object returned to see if there are any errors.\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(objectResponse => {\r\n            // Display dynamic short link\r\n            outputRef.value = objectResponse.shortLink;\r\n        })\r\n        .catch(error => {\r\n            outputRef.value = '';\r\n            showApiError(divErrorRef, error);         \r\n        });\r\n}","export function showApiError(divErrorRef, error) {\r\n    divErrorRef.textContent = 'Network error when attempting to fetch resource.';\r\n    divErrorRef.className = 'error active';\r\n    console.log(error);\r\n}","import './style.scss';\r\n\r\nimport { validateURL } from './js/validate-url';\r\nimport { generateShortLink } from './js/generate-short-link';\r\nimport { copyToClipboard } from './js/copy-to-clipboard';\r\n\r\n// References to DOM elements\r\nconst buttonRef = document.querySelectorAll('button[type=\"button\"]');\r\nconst inputRef = document.querySelector('#input');\r\nconst divErrorRef = document.querySelector('#input + div.error');\r\nconst outputRef = document.querySelector('#output');\r\n\r\n\r\n\r\n// Validate URL before sending HTML request\r\n// Information for users as to whether the value is valid or not, if not, display error message\r\ninputRef.addEventListener('input', event => {\r\n    validateURL(inputRef, divErrorRef);\r\n});\r\n\r\n// Generate Dynamic Short Link\r\nbuttonRef[0].addEventListener('click', event => {\r\n    generateShortLink(event, inputRef, divErrorRef, outputRef);\r\n});\r\n\r\n// Copy to clipboard\r\nbuttonRef[1].addEventListener('click', event => {\r\n    copyToClipboard(outputRef);\r\n});\r\n\r\n","import { showError } from './show-error';\r\n\r\nexport function validateURL(inputRef, divErrorRef) {\r\n    // If error message is visible and if url input is valid, remove error message\r\n    if (inputRef.validity.valid) {\r\n        divErrorRef.textContent = 'Error message'; // Reset the content of the message \r\n        divErrorRef.className = 'error'; // Reset the visual state of message\r\n    } else {\r\n        // If there is still an error, show the correct error message\r\n        showError(inputRef, divErrorRef);\r\n    }\r\n}\r\n\r\n","import { fetchShortLink } from './fetch-short-link';\r\n\r\nexport function generateShortLink(event, inputRef, divErrorRef, outputRef) {\r\n    if (!inputRef.validity.valid) {\r\n        // If input field is not valid, don't send HTML request\r\n        event.preventDefault();\r\n    } else {\r\n        fetchShortLink(inputRef, divErrorRef, outputRef);\r\n    }\r\n}\r\n\r\n\r\n","export function copyToClipboard(outputRef) {\r\n    const cb = navigator.clipboard;\r\n    cb.writeText(outputRef.innerText);\r\n}"],"sourceRoot":""}