{"version":3,"sources":["webpack://url-shortener/./src/js/html-request-data.js","webpack://url-shortener/./src/js/fetch-short-link.js","webpack://url-shortener/./src/js/show-api-error.js","webpack://url-shortener/./src/js/copy-to-clipboard.js","webpack://url-shortener/./src/index.js","webpack://url-shortener/./src/js/validate-url.js","webpack://url-shortener/./src/js/show-error.js","webpack://url-shortener/./src/js/generate-short-link.js"],"names":["htmlRequestData","apiKey","url","param","dynamicLinkInfo","domainUriPrefix","link","suffix","option","myInit","method","headers","Headers","body","updateData","input","this","JSON","stringify","outputRef","document","querySelector","fetchShortLink","inputRef","spanErrorRef","value","fetch","then","response","ok","Error","status","json","objectResponse","shortLink","error","textContent","className","console","log","showApiError","buttonRef","querySelectorAll","addEventListener","event","validity","valid","valueMissing","typeMismatch","showError","validateURL","preventDefault","generateShortLink","select","setSelectionRange","execCommand"],"mappings":"mBAAO,IAAMA,EAAkB,CAC3BC,OAAQ,0CAGRC,IAAK,wGAELC,MACA,CACIC,gBAAiB,CACbC,gBAAiB,yBACjBC,KAAM,IAEVC,OAAQ,CACJC,OAAQ,UAIhBC,OACA,CACIC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CACjB,eAAgB,qBAEpBC,KAAM,IAGVC,WAAY,SAAUC,GAElBC,KAAKb,MAAL,qBAAwCY,EAExCC,KAAKP,OAAOI,KAAOI,KAAKC,UAAUF,KAAKb,SC3B/C,IAAMgB,EAAYC,SAASC,cAAc,WAGlC,SAASC,EAAeC,EAAUC,GAGrCxB,aAA2BuB,EAASE,OAEpCC,MAAM1B,EAAgBE,IAAKF,EAAgBS,QACtCkB,MAAK,SAAAC,GAGF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAJ,8BAAiCF,EAASG,SAEpD,OAAOH,EAASI,UAEnBL,MAAK,SAAAM,GAEFd,EAAUM,MAAQQ,EAAeC,aAXzC,OAaW,SAAAC,GACHhB,EAAUM,MAAQ,GCzBvB,SAAsBD,EAAcW,GACvCX,EAAaY,YAAc,mDAC3BZ,EAAaa,UAAY,eACzBC,QAAQC,IAAIJ,GDuBJK,CAAahB,EAAcW,ME1BvC,IAAMhB,EAAYC,SAASC,cAAc,WCOzC,IAAMoB,EAAYrB,SAASsB,iBAAiB,yBACtCnB,EAAWH,SAASC,cAAc,UAClCG,EAAeJ,SAASC,cAAc,uBAM5CE,EAASoB,iBAAiB,SAAS,SAAAC,ICb5B,SAAqBrB,EAAUC,GAE9BD,EAASsB,SAASC,OAClBtB,EAAaY,YAAc,GAC3BZ,EAAaa,UAAY,SCN1B,SAAmBd,EAAUC,GAC5BD,EAASsB,SAASE,aAElBvB,EAAaY,YAAc,oCACpBb,EAASsB,SAASG,eAEzBxB,EAAaY,YAAc,gDDG3Ba,CAAU1B,EAAUC,GDOxB0B,CAAY3B,EAAUC,MAI1BiB,EAAU,GAAGE,iBAAiB,SAAS,SAAAC,IGlBhC,SAA2BA,EAAOrB,EAAUC,GAC1CD,EAASsB,SAASC,MAInBxB,EAAeC,EAAUC,GAFzBoB,EAAMO,iBHgBVC,CAAkBR,EAAOrB,EAAUC,MAIvCiB,EAAU,GAAGE,iBAAiB,SDvBvB,WACHxB,EAAUkC,SACVlC,EAAUmC,kBAAkB,EAAG,OAC/BlC,SAASmC,YAAY,Y","file":"main.af6a4de41e0ae9aa6463.bundle.js","sourcesContent":["export const htmlRequestData = {\r\n    apiKey: 'AIzaSyCezBfMpaJL-cj_IG0kyF8wK1LcbiCprcI',\r\n    // Concatenation and Template literals didn't work. Why?\r\n    //  url: 'https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key='.concat(apiKey),\r\n    url: 'https://firebasedynamiclinks.googleapis.com/v1/shortLinks?key=AIzaSyCezBfMpaJL-cj_IG0kyF8wK1LcbiCprcI',\r\n\r\n    param:\r\n    {\r\n        dynamicLinkInfo: {\r\n            domainUriPrefix: 'https://arko.page.link',\r\n            link: '',\r\n        },\r\n        suffix: {\r\n            option: 'SHORT'\r\n        }\r\n    },\r\n\r\n    myInit:\r\n    {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'Content-Type': 'application/json'\r\n        }),\r\n        body: {}\r\n    },\r\n\r\n    updateData: function (input) {\r\n        // Use URL from input to update param object\r\n        this.param['dynamicLinkInfo']['link'] = input;\r\n        // Update body which will be send with other fetch options\r\n        this.myInit.body = JSON.stringify(this.param);\r\n    },\r\n}\r\n","import { htmlRequestData } from './html-request-data';\r\nimport { showApiError } from './show-api-error';\r\n\r\nconst outputRef = document.querySelector('#output');\r\n\r\n// Update link data and send request to server\r\nexport function fetchShortLink(inputRef, spanErrorRef) {\r\n    // Update data with new URL input from user\r\n    // Update fetch options\r\n    htmlRequestData.updateData(inputRef.value);\r\n\r\n    fetch(htmlRequestData.url, htmlRequestData.myInit)\r\n        .then(response => {\r\n            //  A fetch() promise does not reject on HTTP errors. \r\n            // Check the response object returned to see if there are any errors.\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(objectResponse => {\r\n            // Display dynamic short link\r\n            outputRef.value = objectResponse.shortLink;\r\n        })\r\n        .catch(error => {\r\n            outputRef.value = '';\r\n            showApiError(spanErrorRef, error);         \r\n        });\r\n}","export function showApiError(spanErrorRef, error) {\r\n    spanErrorRef.textContent = 'Network error when attempting to fetch resource.';\r\n    spanErrorRef.className = 'error active';\r\n    console.log(error);\r\n}","const outputRef = document.querySelector('#output');\r\n\r\nexport function copyToClipboard() {\r\n    outputRef.select();\r\n    outputRef.setSelectionRange(0, 99999); /* For mobile devices */\r\n    document.execCommand(\"copy\");\r\n}","import './style.scss';\r\n\r\nimport { validateURL } from './js/validate-url';\r\nimport { generateShortLink } from './js/generate-short-link';\r\nimport { copyToClipboard } from './js/copy-to-clipboard';\r\n\r\n// References to DOM elements\r\nconst buttonRef = document.querySelectorAll('button[type=\"button\"]');\r\nconst inputRef = document.querySelector('#input');\r\nconst spanErrorRef = document.querySelector('#input + span.error');\r\n\r\n\r\n\r\n// Validate URL before sending HTML request\r\n// Information for users as to whether the value is valid or not, if not, display error message\r\ninputRef.addEventListener('input', event => {\r\n    validateURL(inputRef, spanErrorRef);\r\n});\r\n\r\n// Generate Dynamic Short Link\r\nbuttonRef[0].addEventListener('click', event => {\r\n    generateShortLink(event, inputRef, spanErrorRef);\r\n});\r\n\r\n// Copy to clipboard\r\nbuttonRef[1].addEventListener('click', copyToClipboard);\r\n\r\n","import { showError } from './show-error';\r\n\r\nexport function validateURL(inputRef, spanErrorRef) {\r\n    // If error message is visible and if url input is valid, remove error message\r\n    if (inputRef.validity.valid) {\r\n        spanErrorRef.textContent = ''; // Reset the content of the message \r\n        spanErrorRef.className = 'error'; // Reset the visual state of message\r\n    } else {\r\n        // If there is still an error, show the correct error message\r\n        showError(inputRef, spanErrorRef);\r\n    }\r\n}\r\n\r\n","export function showError(inputRef, spanErrorRef) {\r\n    if (inputRef.validity.valueMissing) {\r\n        // If the field is empty, display the following error message\r\n        spanErrorRef.textContent = 'You need to enter an url address.';\r\n    } else if (inputRef.validity.typeMismatch) {\r\n        // If the field doesn't contain an email address, display the following error message\r\n        spanErrorRef.textContent = 'Entered value needs to be an e-mail address.';\r\n    }\r\n}\r\n\r\n","import { fetchShortLink } from './fetch-short-link';\r\n\r\nexport function generateShortLink(event, inputRef, spanErrorRef) {\r\n    if (!inputRef.validity.valid) {\r\n        // If input field is not valid, don't send HTML request\r\n        event.preventDefault();\r\n    } else {\r\n        fetchShortLink(inputRef, spanErrorRef);\r\n    }\r\n}\r\n\r\n\r\n"],"sourceRoot":""}